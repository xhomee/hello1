1 lesson 18.01.23 

print("Hello " +input("Write u name? ") + "!")


print(len(input("What is your name? ")))


name = input ("What is your name? ")
print(name)


name = input ("What is your name? ")
lenght = len(name)
print(lenght)


a = input("Welcome to the Band Name Generator.\nWhat's the name of the city you grew up in?\n")
b = input("What's your pet's name?\n")
print("Your band name could be " + a + ' ' + b)


=======
2 lesson 19.01.23

print("hello"[1])
: e

num_char = len(input("What is your name? \n"))
new_num_char = str(num_char)
print("Your name has " + new_num_char + " characters.")

print(type(new_num_char))

print(70+ float("123.3"))
:193.3



# 🚨 Don't change the code below 👇
two_digit_number = input("Type a two digit number: ")
# 🚨 Don't change the code above 👆

####################################
#Write your code below this line 👇
a = str(two_digit_number)

first_number = a[0]
second_number = a[1]

print(int(first_number)+int(second_number))



# 🚨 Don't change the code below 👇
height = input("enter your height in m: ")
weight = input("enter your weight in kg: ")
# 🚨 Don't change the code above 👆

#Write your code below this line 👇
height_flo = float(height)
weight_flo = float(weight)

bmi = int(weight_flo/(height_flo*height_flo))
print(bmi)



a= 10
b = 5.1
print(a/b)
print(round(a/b,2))
:1.9607843137254903
1.96



score = 0
height = 1.78
isWinning = True
print(f"your score is {score} {height} {isWinning}" )
: your score is 0 1.78 True



# 🚨 Don't change the code below 👇
age = input("What is your current age? ")
# 🚨 Don't change the code above 👆

#Write your code below this line 👇
age2 = int(age)

days = int(365 * (90 - age2))
weeks = int(52 * (90 - age2))
months = int(12 * (90 - age2))

print(f"You have {days} days, {weeks} weeks, and {months} months left.")

# 1 year = 365 days 52 weeks 12 months



print("Welcome to the tip calculator!")
bill = float(input("What was the total bill? "))
tip = float(input("How much tip would you like to give? 10, 12, or 15? "))
people = int(input("How many people to split the bill? "))

sum_all = round((bill + (bill/100*tip)) / people,2)

print(f"Each person should pay: ${sum_all}")



=======
3 lesson 23.01.23


print("Welcome to the rollercoaster!")
height = int(input("What is your height in cm ? "))

if height >= 120:
    print("Your a welcome!")
else:
    print("Your need to grou up)")



# 🚨 Don't change the code below 👇
number = int(input("Which number do you want to check? "))
# 🚨 Don't change the code above 👆

#Write your code below this line 👇

if number % 2 == 0:
    print("This is an even number.")
else:
    print("This is an odd number.")



print("Welcome to the rollercoaster!")
height = int(input("What is your height in cm ? "))

if height >= 120:
    print("Your a welcome!")
    age = int(input("What is your age? "))
    if age >= 18:
        print("Your ticket coasts 12$")
    else:
        print("Tour ticket costs 7$")
else:
    print("Your need to grou up)")



# 🚨 Don't change the code below 👇
height = float(input("enter your height in m: "))
weight = float(input("enter your weight in kg: "))
# 🚨 Don't change the code above 👆

#Write your code below this line 👇
bmi = round(weight/height**2)

if bmi < 18.5:
    print(f"Your BMI is {bmi}, you are underweight.")
elif bmi >18.5 and bmi < 25:
    print(f"Your BMI is {bmi}, you have a normal weight.")
elif bmi >25 and bmi < 30:
    print(f"Your BMI is {bmi}, you are slightly overweight.")
elif bmi > 30 and bmi < 35:
    print(f"Your BMI is {bmi}, you are obese.")
else:
    print(f"Your BMI is {bmi}, you are clinically obese.")



# 🚨 Don't change the code below 👇
year = int(input("Which year do you want to check? "))
# 🚨 Don't change the code above 👆

#Write your code below this line 👇

if year % 4 == 0:
    if year % 100 == 0:
        if year % 400 ==0:
            print("Leap year.")
    else:
        print("Not leap year.")
else:
    print("Not leap year.")



# 🚨 Don't change the code below 👇
year = int(input("Which year do you want to check? "))
# 🚨 Don't change the code above 👆

#Write your code below this line 👇

#Рік вважається високосним, якщо він ділиться на 4. Винятком є ​​роки, які кратні 100 (такі роки є високосними тільки тоді, якщо вони ще діляться на 400).

if year % 4 == 0 or year % 100 == 0 and year % 400 == 0 :
    print("Leap year.")
else:
    print("Not leap year.")



if year % 4 == 0 and year % 100 == 0 and year % 400 == 0 or year % 4 == 0 and year % 100 != 0 and year % 400 != 0:
    print("Leap year.")
else:
    print("Not leap year.")




print("Welcome to the rollercoaster!")
height = int(input("What is your height in cm ? "))
bill = 0

if height >= 120:
    print("Your a welcome!")
    age = int(input("What is your age? "))
    if age < 12:
        bill = 5
        print("Child ticket coasts 5$")
    elif age <= 18:
        bill = 7
        print("Youth ticket coasts 7$")
    else:
        bill = 12
        print("Adult ticket costs 12$")

    wants_photo = input("Do you want a photo taken? Y or N ")
    if wants_photo == "Y" or wants_photo == "y":
        bill += 3

    print(f"Your final bill is {bill}")

else:
    print("Your need to grou up)")



# 🚨 Don't change the code below 👇
print("Welcome to Python Pizza Deliveries!")
size = input("What size pizza do you want? S, M, or L ")
add_pepperoni = input("Do you want pepperoni? Y or N ")
extra_cheese = input("Do you want extra cheese? Y or N ")
# 🚨 Don't change the code above 👆

#Write your code below this line 👇
price = 0

#what size pizza u want
if size == "S" or size == "s":
    price += 15
    if add_pepperoni == "Y" or add_pepperoni == "y":
        price +=2
    if extra_cheese == "Y" or extra_cheese == "y":
        price +=1
if size == "M" or size == "m":
    price += 20
    if add_pepperoni == "Y" or add_pepperoni == "y":
        price +=3
    if extra_cheese == "Y" or extra_cheese == "y":
        price +=1
if size == "L" or size == "l":
    price += 25
    if add_pepperoni == "Y" or add_pepperoni == "y":
        price +=3
    if extra_cheese == "Y" or extra_cheese == "y":
        price +=1

print(f"Your final bill is: ${price}.")



# 🚨 Don't change the code below 👇
print("Welcome to Python Pizza Deliveries!")
size = input("What size pizza do you want? S, M, or L ")
add_pepperoni = input("Do you want pepperoni? Y or N ")
extra_cheese = input("Do you want extra cheese? Y or N ")
# 🚨 Don't change the code above 👆

price = 0

if size == "S" or size == "s":
    price += 15
elif size == "M" or size == "m":
    price += 20
elif size == "L" or size == "l":
    price += 25
else:
    print("Wrong action")

if add_pepperoni == "Y" or add_pepperoni == "y":
    if size == "S" or size == "s":
        price += 2
    elif size == "M" or size == "m" or size == "L" or size == "l":
        price += 3

if extra_cheese == "Y" or extra_cheese == "y":
    price += 1

print(f"Your final bill is: ${price}.")



# 🚨 Don't change the code below 👇
print("Welcome to the Love Calculator!")
name1 = input("What is your name? \n")
name2 = input("What is their name? \n")

# 🚨 Don't change the code above 👆

#Write your code below this line 👇
oll = name1 + name2

t = oll.lower().count("t")
r = oll.lower().count("r")
u = oll.lower().count("u")
e = oll.lower().count("e")

l = oll.lower().count("l")
o = oll.lower().count("o")
v = oll.lower().count("v")
e2 = oll.lower().count("e")

first_numbers = t+r+u+e
second_numbers = l+o+v+e

make_string = str(first_numbers)+str(second_numbers)
make_integer = int(make_string)

if make_integer >=40 and make_integer <= 50:
    print(f"Your score is {make_integer}, you are alright together.")
elif make_integer < 10 or make_integer > 90:
    print(f"Your score is {make_integer}, you go together like coke and mentos.")
else:
    print(f"Your score is {make_integer}.")



print('''
*******************************************************************************
          |                   |                  |                     |
 _________|________________.=""_;=.______________|_____________________|_______
|                   |  ,-"_,=""     `"=.|                  |
|___________________|__"=._o`"-._        `"=.______________|___________________
          |                `"=._o`"=._      _`"=._                     |
 _________|_____________________:=._o "=._."_.-="'"=.__________________|_______
|                   |    __.--" , ; `"=._o." ,-"""-._ ".   |
|___________________|_._"  ,. .` ` `` ,  `"-._"-._   ". '__|___________________
          |           |o`"=._` , "` `; .". ,  "-._"-._; ;              |
 _________|___________| ;`-.o`"=._; ." ` '`."\` . "-._ /_______________|_______
|                   | |o;    `"-.o`"=._``  '` " ,__.--o;   |
|___________________|_| ;     (#) `-.o `"=.`_.--"_o.-; ;___|___________________
____/______/______/___|o;._    "      `".o|o_.--"    ;o;____/______/______/____
/______/______/______/_"=._o--._        ; | ;        ; ;/______/______/______/_
____/______/______/______/__"=._o--._   ;o|o;     _._;o;____/______/______/____
/______/______/______/______/____"=._o._; | ;_.--"o.--"_/______/______/______/_
____/______/______/______/______/_____"=.o|o_.--""___/______/______/______/____
/______/______/______/______/______/______/______/______/______/______/[TomekK]
*******************************************************************************
''')
print("Welcome to Treasure Island.")
print("Your mission is to find the treasure.")

first_step = input("You're at a cross road. Where do you want to go? Type ""left" ' or ' "right\n""")


if first_step == "Left" or first_step == "left" or first_step == "L" or first_step == "l":
    second_step = input("""You've come to a lake. There is an island in the middle of the lake.
Type "wait" to wait for a boat. Type "swim" to swim across.\n""")
    if second_step == "Wait" or second_step == "wait" or second_step == "W" or second_step == "w":
        third_step = input("You arrive at the island unharmed. There is a house with 3 doors. "
                           "\nOne red, one yellow and one blue. Which colour do you choose?\n")
        if third_step == "Red" or third_step == "red" or third_step == "R" or third_step == "r":
            print("It's a room full of fire. Game Over.")
        elif third_step == "Blue" or third_step == "blue" or third_step == "B" or third_step == "b":
            print("You enter a room of beasts. Game Over.")
        elif third_step == "Yellow" or third_step == "yellow" or third_step == "Y" or third_step == "y":
            print("You found the treasure! You Win!")
        elif third_step == "xhomee":
            print("gg wp")
        else:
            print("You chose a door that doesn't exist. Game Over.")

    else:
        print("You get attacked by an angry trout. Game Over.")

else:
    print("You fell into a hole. Game Over.")



4 day

import pi_module
print(pi_module.pi)



import random

random_integer = random.randint(1,10)
print(random_integer)
print(" ")

random_float = random.random()
print(random_float)
print(random_float*5)

print(" ")
random_float2 = random.uniform(0,5)
print(random_float2)



import random

number_random = random.randint(0,1)
if number_random == 1:
    print("Heads")
else:
    print("Tails")



states_of_america = [ "Delaware", "Pennsylvania" ]
print(states_of_america[0])
: Delaware

states_of_america = [ "Delaware", "Pennsylvania" ]
print(states_of_america[0])

states_of_america[0] = 'Hello'
print(states_of_america)
:Delaware
:['Hello', 'Pennsylvania']

states_of_america.append("ff")
print(states_of_america)
:['Hello', 'Pennsylvania', 'ff']

states_of_america.extend(["hi","hello"])
print(states_of_america)
:['Hello', 'Pennsylvania', 'ff', 'hi', 'hello']



import random
# Import the random module here

# Split string method
#names_string = input("Give me everybody's names, separated by a comma. ")
names_string = "Angela, Ben, Jenny, Michael, Chloe"
names = names_string.split(", ")
# 🚨 Don't change the code above 👆

#Write your code below this line 👇

people_len = len(names)
people_pay = random.randint(0,people_len-1)
pays = names[people_pay]
print(f"{pays} is going to buy the meal today!")

or use .choice
x = random.choice(names)
print(x)



fruits = ["Strawberries","Nectarines","Apples","Grapes","Peaches","Cherries","Pears"]
vegetables =["Spinach","Kale","Tomatoes","Celery", "Potatoes"]
dirty_dozen2 = [fruits, vegetables]
print(dirty_dozen2)
: [['Strawberries', 'Nectarines', 'Apples', 'Grapes', 'Peaches', 'Cherries', 'Pears'], ['Spinach', 'Kale', 'Tomatoes', 'Celery', 'Potatoes']]

print(dirty_dozen2[0][0])
: Strawberries



# 🚨 Don't change the code below 👇
row1 = ["⬜️","️⬜️","️⬜️"]
row2 = ["⬜️","⬜️","️⬜️"]
row3 = ["⬜️️","⬜️️","⬜️️"]
map = [row1, row2, row3]
print(f"{row1}\n{row2}\n{row3}")
position = input("Where do you want to put the treasure? ")
# 🚨 Don't change the code above 👆

#Write your code below this row 👇
x_variable = int(position[0])
y_variable = int(position[1])

if x_variable == 1:
    if y_variable == 1:
        row1.insert(x_variable, "X")
        row1.pop(x_variable - 1)
    elif y_variable == 2:
        row2.insert(x_variable, "X")
        row2.pop(x_variable - 1)
    elif y_variable == 3:
        row3.insert(x_variable, "X")
        row3.pop(x_variable - 1)
elif x_variable == 2:
    if y_variable == 1:
        row1.insert(x_variable, "X")
        row1.pop(x_variable - 1)
    elif y_variable == 2:
        row2.insert(x_variable, "X")
        row2.pop(x_variable - 1)
    elif y_variable == 3:
        row3.insert(x_variable, "X")
        row3.pop(x_variable - 1)
elif x_variable ==  3:
    if y_variable == 1:
        row1.insert(x_variable, "X")
        row1.pop(x_variable - 1)
    elif y_variable == 2:
        row2.insert(x_variable, "X")
        row2.pop(x_variable - 1)
    elif y_variable == 3:
        row3.insert(x_variable, "X")
        row3.pop(x_variable - 1)

# 🚨 Don't change the code below 👇
print(f"{row1}\n{row2}\n{row3}")

or u can use
::::::::::  x = map[y_variable-1][x_variable-1] ="x"



5 day 26.01.23

fruits = ["Strawberries","Nectarines","Apples","Grapes","Peaches","Cherries","Pears"]
for fruit in fruits:
    print(fruit)



# 🚨 Don't change the code below 👇
student_heights = input("Input a list of student heights ").split()
for n in range(0, len(student_heights)):
  student_heights[n] = int(student_heights[n])
# 🚨 Don't change the code above 👆

all_height = 0
for student_all_height in student_heights:
    all_height += student_all_height
    #print(all_height)

quantity = []
for quantity_of_students in student_heights:
    quantity.append(quantity_of_students - quantity_of_students +1)
    student_quantity = quantity.count(1)
    #print(student_quantity)

student_average = round(all_height / student_quantity)
# print(round(student_average))

print(f"Average height rounded to the nearest whole number = {student_average}")



all_height = 0
for student_all_height in student_heights:
    all_height += student_all_height

quantity = 0
for quantity_of_students in student_heights:
    quantity +=1

print(round(all_height/quantity))



student_scores = [78, 65, 89, 86, 55, 91, 64, 89]
b = [0]
for items in student_scores:
    if items > b[0]:
        b.append(items)
        b.pop(0)

print(f"The highest score in the class is: {b[0]}")


x = 0
for items in student_scores:
    if items>x:
        x = items
print(x)



for number in range(1,10):
    print(number)
: 1 2 3 4 5 6 7 8 9

for number in range(1,11,3):
    print(number)
: 1 4 7 10

x = 0
for number in range(1,101):
    x+=number
    print(x)

x = 0
for even in range(0,101,2):
    x +=even
print(x)



# Your program should print each number from 1 to 100 in turn.
# When the number is divisible by 3 then instead of printing the number it should print "Fizz".
# When the number is divisible by 5, then instead of printing the number it should print "Buzz".`
#   And if the number is divisible by both 3 and 5 e.g. 15 then instead of the number it should print "FizzBuzz"
for number in range(1,101):
    if number %3 == 0 and number %5 == 0:
        print("FizzBuzz")
    elif number % 3 == 0:
        print("Fizz")
    elif number % 5 == 0:
        print("Buzz")
    else:
        print(number)



#Password Generator Project
import random
letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']
symbols = ['!', '#', '$', '%', '&', '(', ')', '*', '+']
numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']

print("Welcome to the PyPassword Generator!")
nr_letters= int(input("How many letters would you like in your password?\n"))
nr_symbols = int(input(f"How many symbols would you like?\n"))
nr_numbers = int(input(f"How many numbers would you like?\n"))


#add random letters
random_letters = []
for element in range(nr_letters):
    random_letters.append(random.choice(letters))
str_element_random_letters = ''
for element in random_letters:
    str_element_random_letters += element


#add random symbols
random_symbols = []
for element in range(nr_symbols):
    random_symbols.append(random.choice(numbers))
str_element_random_symbols = ''
for element in random_symbols:
    str_element_random_symbols += element


#add random numbers
random_numbers = []
for element in range(nr_symbols):
    random_numbers.append(random.choice(symbols))
str_element_random_numbers = ''
for element in random_numbers:
    str_element_random_numbers += element


# add shuffling to
x = []
b = []
c = ''
x.append(random_letters + random_symbols + random_numbers)
for element in x:
    b += element
random.shuffle(b)
for element in b:
    c += element


print(f"No shuffling: {str_element_random_letters}{str_element_random_symbols}{str_element_random_numbers}")
print(f"With shuffling: {c}")

====
password = []
for char in range(nr_letters):
    password.append(random.choice(letters))

for char in range(nr_symbols):
    password.append(random.choice(symbols))

for char in range(nr_numbers):
    password.append(random.choice(numbers))

random.shuffle(password)
c_password = ''
for char in password:
    c_password +=char

print(f"With shuffling2: {c_password}")



6 day 30.01.23


def my_function():
    print("hello")
    print("bye")

my_function()
: hello
: bye



def turn_right():
    turn_left()
    turn_left()
    turn_left()


def step():
    move()
    turn_left()
    move()
    turn_right()
    move()
    turn_right()
    move()
    turn_left()

for inf in range(6):
    step()



while at_goal() == False:
    step()

while not at_goal():
    step()


def turn_right():
    turn_left()
    turn_left()
    turn_left()

def go_around():
    turn_left()
    move()
    turn_right()
    move()
    turn_right()
    move()
    turn_left()

while at_goal() == False:
    if front_is_clear() == True:
        while front_is_clear() == True:
            if at_goal() == False:
                move()
            elif at_goal() == True:
                done()
    elif wall_in_front() == True:
        while wall_in_front() == True:
            go_around()

# or u can use this
while not at_goal():
    if wall_in_front():
        go_around()
    else:
        move()


#https://reeborg.ca/reeborg.html hurdle 4
def turn_right():
    turn_left()
    turn_left()
    turn_left()

while not at_goal():
    if wall_in_front() and wall_on_right():
        turn_left()
        if wall_on_right() and wall_in_front():
            turn_left()
        if wall_on_right():
            move()
        elif right_is_clear():
            turn_right()
            move()
    elif front_is_clear() and wall_on_right():
        move()
    else:
        turn_right()
        move()


def jump():
    turn_left()
    while wall_on_right():
        move()
    turn_right()
    move()
    turn_right()
    while front_is_clear():
        move()
    turn_left()

while not at_goal():
    if wall_in_front():
        jump()
    else:
        move()



#https://reeborg.ca/reeborg.html maze 4
def turn_right():
    turn_left()
    turn_left()
    turn_left()

while not at_goal():
    if wall_in_front() and wall_on_right():
        turn_left()
    elif right_is_clear():
        if right_is_clear() != True:
            turn_left()
            move()
        else:
            turn_right()
            move()
    else:
        move()


while not at_goal():
    if wall_in_front() and wall_on_right():
        turn_left()
    elif right_is_clear():
            turn_right()
            move()
    else:
        move()


while not at_goal():
    if right_is_clear():
        turn_right()
        move()
    elif front_is_clear():
        move()
    else:
        turn_left()



7 day 31.01.23 hangman

a= 3
if not a>1: - False

a = 0
if not a>1: - True



#Step 1
import random
#word_list = ["мумія", "кірник", "карамелька"] #original
word_list = ["soprose"]
chosen_word = random.choice(word_list)
#print(f'Pssst, the solution is {chosen_word}.')

# NEED add - in list
add_underscore = [] # -------
for letters in chosen_word:
    add_underscore.append("-")


#guess = input("Enter a letter ").lower() # original
guess = "r"

# NEED create list from world_list
chosen_word_list = []
for index in chosen_word:
    chosen_word_list+=index
print(chosen_word_list)

# NEED change/add letters in underscore word
for letter in chosen_word_list:
    if letter == guess:
        x = chosen_word_list.index(letter)
        chosen_word_list.pop(x)
        chosen_word_list.insert(x, 0)

        add_underscore.pop(x)
        add_underscore.insert(x, letter)
    else:
        pass
print(add_underscore)



dispay = ''
for index in add_underscore:
    dispay+=index
print(dispay)



:::::
# NEED add _ in list
add_underscore = []
for letters in chosen_word:
    add_underscore.append("_")

#guess = input("Enter a letter ").lower() # original

for position in range(len(chosen_word)):
    letter = chosen_word[position]
    if letter == guess:
        add_underscore[position] = letter
print(add_underscore)


dispay = ''
for index in add_underscore:
    dispay+=index
print(dispay)



#Step 3
import random
#word_list = ["мумія", "кірник", "карамелька"] #original
word_list = ["soprose"]
chosen_word = random.choice(word_list)
#print(f'Pssst, the solution is {chosen_word}.')
#guess = "r"

# NEED add _ in list
add_underscore = []
for letters in chosen_word:
    add_underscore.append("_")

#guess = input("Enter a letter ").lower() # original

def first():
    guess = input("Enter a letter ").lower()  # original

    for position in range(len(chosen_word)):
        letter = chosen_word[position]
        if letter == guess:
            add_underscore[position] = letter

    print(add_underscore)

a= 1
while not a<0:
    if '_' in add_underscore:
        first()
    else:
        print("You win")
        break


    # dispay = ''
    # for index in add_underscore:
    #     dispay+=index
    # print(dispay)



::::
def first():
    guess = input("Enter a letter ").lower()  # original

    for position in range(len(chosen_word)):
        letter = chosen_word[position]
        if letter == guess:
            add_underscore[position] = letter

    print(add_underscore)

end_of_game = False

while not end_of_game:
    if '_' not in add_underscore:
        end_of_game = True
        print("You win")
    else:
        first()



::::::
def first():
    guess = input("Enter a letter ").lower()  # original

    for position in range(len(chosen_word)):
        letter = chosen_word[position]
        if letter == guess:
            add_underscore[position] = letter

    print(add_underscore)

end_of_game = False

while not end_of_game:
    first()
    if '_' not in add_underscore:
        end_of_game = True
        print("You win")




#Step 4
import random
stages = ['''
  +---+
  |   |
  O   |
 /|\  |
 / \  |
      |
=========
''', '''
  +---+
  |   |
  O   |
 /|\  |
 /    |
      |
=========
''', '''
  +---+
  |   |
  O   |
 /|\  |
      |
      |
=========
''', '''
  +---+
  |   |
  O   |
 /|   |
      |
      |
=========''', '''
  +---+
  |   |
  O   |
  |   |
      |
      |
=========
''', '''
  +---+
  |   |
  O   |
      |
      |
      |
=========
''', '''
  +---+
  |   |
      |
      |
      |
      |
=========
''']
#word_list = ["мумія", "кірник", "карамелька"] #original
word_list = ["soprose"]
chosen_word = random.choice(word_list)

lives = 6


#print(f'Pssst, the solution is {chosen_word}.')


# NEED add _ in list
add_underscore = []
for letters in chosen_word:
    add_underscore.append("_")



end_of_game = False

while not end_of_game:
    while not lives <= 0:
        guess = input("Enter a letter ").lower()  # original
        if guess in chosen_word:
            for position in range(len(chosen_word)):
                letter = chosen_word[position]
                if letter == guess:
                    add_underscore[position] = letter
            break
        else:
            lives -=1
            if lives == 6:
                print(stages[5])
            elif lives == 5:
                print(stages[4])
            elif lives == 4:
                print(stages[3])
            elif lives == 3:
                print(stages[2])
            elif lives == 2:
                print(stages[1])
            elif lives == 1:
                print(stages[0])
            break


    print(f"{' '.join(add_underscore)}")

    if lives <= 0:
        end_of_game = True
        print("Your lose")


    if '_' not in add_underscore:
        end_of_game = True
        print("You win")



import random
import pi_module

word_list = ["avadakadabra", "baboon", "camel"]
#pi_module.world_list_ua
x = pi_module.word_list_eng
chosen_word = random.choice(x)
lives = 6
end_of_game = False

print(pi_module.logo)

# NEED add _ in list
add_underscore = []
for letters in chosen_word:
    add_underscore.append("_")


while not end_of_game:
    while not lives <= 0:
        guess = input("Enter a letter ").lower()  # original
        if guess in add_underscore:
            print("This letter already exists")
            print("")

        elif guess in chosen_word:
            for position in range(len(chosen_word)):
                letter = chosen_word[position]
                if letter == guess:
                    add_underscore[position] = letter
            break

        else:
            lives -=1
            print(f"{guess} not in the word")
            break


    print(pi_module.stages[lives])
    print(f"{' '.join(add_underscore)}    word length: {len(chosen_word)}")
    print("")

    if lives <= 0:
        end_of_game = True
        print("Your lose")

    if '_' not in add_underscore:
        end_of_game = True
        print("You win")



8 day 1.02.23

def great_with_name(name):
    print(f"hello {name}")

great_with_name("ande")


def great_with(name, location):
    print(f"Helllo {name}")
    print(f"U location is {location}")

great_with("andrey", "Kyiv")


great_with(name = "andrey", location = "Kyiv")



#Write your code below this line 👇
import math
def paint_calc(height, width, cover):
    exitt = math.ceil(height*width/cover)
    print(f"You'll need {exitt} cans of paint.")

#Write your code above this line 👆
# Define a function called paint_calc() so that the code below works.

# 🚨 Don't change the code below 👇
test_h = int(input("Height of wall: "))
test_w = int(input("Width of wall: "))
coverage = 5
paint_calc(height=test_h, width=test_w, cover=coverage)



def prime_checker(number):
    if number % 2 == 0 or number % 3 == 0:
        print("It's not a prime number.")
    else:
        print("It's a prime number.")



def prime_checker(number):
    is_prime = True
    for i in range(2, number):
        if number % i == 0:
            is_prime = False
            print(i)
    if is_prime:
        print("It's not a prime number.")
    else:
        print("It's a prime number.")





##############################
# part 1
alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

#direction = input("Type 'encode' to encrypt, type 'decode' to decrypt:\n")
#text = input("Type your message:\n").lower()
#shift = int(input("Type the shift number:\n"))

def encrypt(text , shift):
    # create number of word
    text2 = []
    for element in text:
        x = alphabet.index(element)
        text2.append(x)
    #print(text2)

    # add shift to word
    save3 = []
    for element in text2:
        if element + shift > 25:        # 26 english letters
            key = (element + shift) - 26
            save3.append(key)
        else:
            element += shift
            save3.append(element)
    #print(save3)

    # print encrypted word
    save4 = ""
    for element in save3:
        x = alphabet[element]
        save4 += x
    return save4



x = encrypt(text= "civilization", shift= 23)
print(f"Your word is: {x}")



#######################

def encrypt_teatcher(plain_text, shift_amount):
    chipher_text = ""
    for letter in plain_text:
        position = alphabet.index(letter)
        new_position = position + shift_amount
        new_letter = alphabet[new_position]
        chipher_text +=new_letter
    print(f"The encoded text is: {chipher_text}")
##############################

def encrypt(plain_text, shift_amount):
    chipher_text = ""
    for letter in plain_text:
        position = alphabet.index(letter)
        if position + shift_amount > 25:
            new_position = (position + shift_amount) - 26
        else:
            new_position = position + shift_amount
        new_letter = alphabet[new_position]
        chipher_text +=new_letter
    print(f"The encoded text is: {chipher_text}")

def decryppt(plain_text, shift_amount):
    chipher_text = ""
    for letter in plain_text:
        position = alphabet.index(letter)
        if position - shift_amount < 0:
            new_position = (26 + (position - shift_amount))
        else:
            new_position = position - shift_amount
        new_letter = alphabet[new_position]
        chipher_text +=new_letter
    print(f"The decode text is: {chipher_text}")

##########
alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z','a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

direction = input("Type 'encode' to encrypt, type 'decode' to decrypt:\n")
# text = input("Type your message:\n").lower()
# shift = int(input("Type the shift number:\n"))

def encrypt(plain_text, shift_amount):
    chipher_text = ""
    for letter in plain_text:
        position = alphabet.index(letter)
        if position + shift_amount > 25:
            new_position = (position + shift_amount) - 26
        else:
            new_position = position + shift_amount
        new_letter = alphabet[new_position]
        chipher_text +=new_letter
    print(f"The encoded text is: {chipher_text}")

def decryppt(plain_text, shift_amount):
    chipher_text = ""
    for letter in plain_text:
        position = alphabet.index(letter)
        if position - shift_amount < 0:
            new_position = (26 + (position - shift_amount))
        else:
            new_position = position - shift_amount
        new_letter = alphabet[new_position]
        chipher_text +=new_letter
    print(f"The decode text is: {chipher_text}")


if direction == "encode" or direction == "e":
    text = input("Type your message:\n").lower()
    shift = int(input("Type the shift number:\n"))
    encrypt(plain_text=text, shift_amount=shift)
    #encrypt(plain_text= "civilization", shift_amount= 15)
elif direction == "decode" or direction == "d":
    text = input("Type your message:\n").lower()
    shift = int(input("Type the shift number:\n"))
    decryppt(plain_text=text, shift_amount=shift)
    #decryppt(plain_text= "rxkxaxopixdc", shift_amount= 15)
elif direction == "xhomee":
    print("U god")
else:
    print("I dont know this comand")


#
# encrypt(plain_text= "civilization", shift_amount= 15)
# decryppt(plain_text= "rxkxaxopixdc", shift_amount= 15) khoorzsdpex


#####################
#ster 3 end
alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

direction = input("Type 'encode or e' to encrypt, type 'decode or d' to decrypt:\n")
text = input("Type your message:\n").lower()
shift = int(input("Type the shift number:\n"))

def caesar(text_t, shift_t, direction_t):
    chipher_text = ""
    for letter in text_t:
        position = alphabet.index(letter)
        if direction_t == "encode" or direction_t == "e":
            if position + shift_t > 25:
                new_position = (position + shift_t) - 26
            else:
                new_position = position + shift_t
        elif direction_t == "decode" or direction_t == "d":
            if position - shift_t < 0:
                new_position = (26 + (position - shift_t))
            else:
                new_position = position - shift_t
        else:
            print("I dont know this comand")

        new_letter = alphabet[new_position]
        chipher_text +=new_letter
    print(f"The {direction_t} text is: {chipher_text}")

caesar(text_t=text, shift_t= shift, direction_t= direction)


#########
day 8 end

from pi_module import logo
alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
print(logo)

def caesar(text_t, shift_t, direction_t):
    end_text = ""
    for letter in text_t:
        if letter not in alphabet:
            end_text += letter
        else:
            position = alphabet.index(letter)
            if direction_t == "encode" or direction_t == "e":
                if position + shift_t > 25:
                    new_position = (position + shift_t) - 26
                else:
                    new_position = position + shift_t
            elif direction_t == "decode" or direction_t == "d":
                if position - shift_t < 0:
                    new_position = (26 + (position - shift_t))
                else:
                    new_position = position - shift_t
            else:
                print("I dont know this comand")

            new_letter = alphabet[new_position]
            end_text +=new_letter
    print(f"The {direction_t} text is: {end_text}")
    print("")


code_working = True
while code_working:
    direction = input("Type 'encode or e' to encrypt, type 'decode or d' to decrypt:\n")
    text = input("Type your message:\n").lower()
    shift = int(input("Type the shift number:\n"))


    if shift > 26 :
        x = shift % 26
    else:
        x = shift
    caesar(text_t=text, shift_t=x, direction_t=direction)

    end = input("Type 'yes or y' if you want to go again. Otherwise type 'no or n'.\n").lower()
    if end == "yes" or end == "y":
        pass
    elif end == "xhomee":
        print("Your a god")
        pass
    else:
        code_working = False
        print("Good Bye")



9 day 9.02.23

programming_dictionary = {
    "Bug": "An error in a program that prevents the program from running as expected.",
    "Function": "A piece of code that you can easily call over and over again.",
    1 : "hello"
}

x = programming_dictionary[1]
print(x)
: hello



programming_dictionary["add_new"] = "hello i add new key "
print(programming_dictionary)
::{'Bug': 'An error in a program that prevents the program from running as expected.',
'Function': 'A piece of code that you can easily call over and over again.',
1: 'hello',
'add_new': 'hello i add new key '}


programming_dictionary ={}
print(programming_dictionary)
:{}


for thing in programming_dictionary:
    print(thing)
:: Bug
Function
1
add_new


for key in programming_dictionary:
    print(key)
    print(programming_dictionary[key])
:add_new
hello i add new key



student_scores = {
    "Harry": 81,
    "Ron": 78,
    "Hermione": 99,
    "Draco": 74,
    "Neville": 62,
}
# 🚨 Don't change the code above 👆
student_grades = student_scores

for keys in student_grades:
    if student_scores[keys] <= 70:
        student_grades[keys] = "Fail"
    elif student_scores[keys] >= 71 and student_scores[keys] <=80:
        student_grades[keys] = "Acceptable"
    elif student_scores[keys] >= 81 and student_scores[keys] <=90:
        student_grades[keys] = "Exceeds Expectations"
    elif student_scores[keys] >= 91 and student_scores[keys] <=100:
        student_grades[keys] = "Outstanding"

#teatcher answer
student_grades = {}
for student in student_scores:
    score = student_scores[student]
    if score > 90:
        student_grades[student] = "Outstanding"
    elif score > 80:
        student_grades[student] = "Exceeds Expectations"
    elif score > 70:
        student_grades[student] = "Exceeds Expectations"
    else:
        student_grades[student] = "Fail"
print(student_grades)




travel_log = {
    "France" : {"city_visited" : ["Paris", "Lille", "Dijon"], "total_visits": 12},
    "Germany" : ["Berlin", "Hamburg", "Stuttgart"],
}
:{'France': {'city_visited': ['Paris', 'Lille', 'Dijon'], 'total_visits': 12}, 'Germany': ['Berlin', 'Hamburg', 'Stuttgart']}



travel_log = [
    {"country": "France", "city_visited": ["Paris", "Lille", "Dijon"], "total_visits": 12},
    {"country": "Germany", "city_visited": ["Berlin", "Hamburg", "Stuttgart"], "total_visits": 4},
]
:[{'country': 'France', 'city_visited': ['Paris', 'Lille', 'Dijon'], 'total_visits': 12}, {'country': 'Germany', 'city_visited': ['Berlin', 'Hamburg', 'Stuttgart'], 'total_visits': 4}]


travel_log = [
    {
        "country": "France",
        "city_visited": ["Paris", "Lille", "Dijon"],
        "total_visits": 12
    },
    {
        "country": "Germany",
        "city_visited": ["Berlin", "Hamburg", "Stuttgart"],
        "total_visits": 4
    },
]
:[{'country': 'France', 'city_visited': ['Paris', 'Lille', 'Dijon'], 'total_visits': 12}, {'country': 'Germany', 'city_visited': ['Berlin', 'Hamburg', 'Stuttgart'], 'total_visits': 4}]


##############
travel_log = [
{
  "country": "France",
  "visits": 12,
  "cities": ["Paris", "Lille", "Dijon"]
},
{
  "country": "Germany",
  "visits": 5,
  "cities": ["Berlin", "Hamburg", "Stuttgart"]
},
]

#🚨 Do NOT change the code above

def add_new_country(name, value, list_of_cities):
    travel_log.append(dict())
    travel_log[-1]["country"] = name
    travel_log[-1]["visits"] = value
    travel_log[-1]["cities"] = list_of_cities


#🚨 Do not change the code below
add_new_country("Ukraine", 2, ["Kyiv" , "Kharkiv"])
print(travel_log)
:[{'country': 'France', 'visits': 12, 'cities': ['Paris', 'Lille', 'Dijon']},
{'country': 'Germany', 'visits': 5, 'cities': ['Berlin', 'Hamburg', 'Stuttgart']},
{'country': 'Ukraine', 'visits': 2, 'cities': ['Kyiv', 'Kharkiv']}]


#### teacher answer
def add_new_country2(country_visited, times_visited, cities_visited):
    new_country = {}
    new_country["country"] = country_visited
    new_country["visits"] = times_visited
    new_country["cities"] = cities_visited
    travel_log.append(new_country)



####
add_dict = {}
add_dict["name"] = you_name
add_dict["price"] = you_price
check_dict.append(add_dict)


add_dict = {"name": you_name, "price": you_price}
check_dict.append(add_dict)



################ end 9 day
#from pi_module import logo
#
#print(logo)
check_dict = []

poll = True
while poll:
    your_name = input("What is your name?: ")
    your_price = int(input("What is your bid?: "))

    def check_biggest(you_name, you_price):
        add_dict = {"name": you_name, "price": you_price}
        check_dict.append(add_dict)


    check_biggest(you_name=your_name, you_price=your_price)
    end_poll = input("Are there any other bidders? Type 'yes or 'no'.").lower()
    if end_poll == "n" or end_poll == "no":
        big = 0
        name = ""
        for biggest_value in check_dict:
            if biggest_value["price"] > big:
                big = biggest_value["price"]
                name = biggest_value["name"]
        print(f"The winner is {name} with a bid of ${big}")
        poll = False



#teatcher answer
bids = {}
bidding_finished = False

def find_highest_bidder(bidding_record):
  highest_bid = 0
  winner = ""
  # bidding_record = {"Angela": 123, "James": 321}
  for bidder in bidding_record:
    bid_amount = bidding_record[bidder]
    if bid_amount > highest_bid:
      highest_bid = bid_amount
      winner = bidder
  print(f"The winner is {winner} with a bid of ${highest_bid}")

while not bidding_finished:
  name = input("What is your name?: ")
  price = int(input("What is your bid?: $"))
  bids[name] = price
  should_continue = input("Are there any other bidders? Type 'yes or 'no'.\n")
  if should_continue == "no":
    bidding_finished = True
    find_highest_bidder(bids)



10 day 24.02.23
def format_name(first_name, last_name):
    formated_first_name = first_name.title()
    formated_last_name = last_name.title()
    return f"{formated_first_name} {formated_last_name}"


formated_string = format_name("sergey", "PETRENKo")
print(formated_string)

print(format_name("sergey", "PETRENKo"))



def format_name(first_name, last_name):
    if first_name == "" or last_name == "":
        return
    formated_first_name = first_name.title()
    formated_last_name = last_name.title()
    return f"{formated_first_name} {formated_last_name}"

print(format_name(input("What is your name? "), input("What is your last name? ")))




def is_leap(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False # not leap
        else:
            return True # leap
    else:
        return False


def days_in_month(year,month):
    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    if is_leap(year) == True:  #year leap
        month_days[1] = 29
        month = month_days[month - 1]
        return month
    else: # year not leap
        month = month_days[month - 1]
        return month


# 🚨 Do NOT change any of the code below
year = int(input("Enter a year: "))
month = int(input("Enter a month: "))
days = days_in_month(year, month)
print(days)
::Enter a year: 2020
::Enter a month: 3
::31



def add(n1, n2):
    return n1 + n2

operations = {"+": add}
function = operations["+"]
print(function(2,8))
::10




# calculator
def add(n1, n2):
    return n1 + n2


def subtract(n1, n2):
    return n1 - n2


def multiply(n1, n2):  #множення
    return n1 * n2


def divide(n1, n2):  #ділення
    return n1 / n2


operations = {"+": add,
       "-": subtract,
       "*": multiply,
       "/": divide}

num1 = int(input("What is first number? "))

for key in operations:
    print(key)

operation_symbol = input("Print operation symbol: ")
num2 = int(input("What is second number? "))
answer = operations[operation_symbol]
print(f"{num1} {operation_symbol} {num2} = {answer(num1,num2)}")



# calculator v2
def add(n1, n2):
    return n1 + n2


def subtract(n1, n2):
    return n1 - n2


def multiply(n1, n2):  #множення
    return n1 * n2


def divide(n1, n2):  #ділення
    return n1 / n2


num1 = int(input("What is first number? "))
operations = {
"+": add,
"-": subtract,
"*": multiply,
"/": divide
}

for key in operations:
    print(key)

calculat = True
while calculat:

    operation_symbol = input("Print operation symbol: ")
    num2 = int(input("What is second number? "))
    calculation_function = operations[operation_symbol]
    answer = calculation_function(num1, num2)
    print(f"{num1} {operation_symbol} {num2} = {answer}")

    new_calculate = input(f"Type 'y' to continue calculating with {answer}, or type 'n' to start a new calculation:")
    if new_calculate == "y":
        num1 = answer
    else:
        print("bye")
        calculat = False



# calculator v3_with_def
def add(n1, n2):
    return n1 + n2


def subtract(n1, n2):
    return n1 - n2


def multiply(n1, n2):  #множення
    return n1 * n2


def divide(n1, n2):  #ділення
    return n1 / n2

def cal():
    operation_symbol = input("Print operation symbol: ")
    num2 = int(input("What is second number? "))
    calculation_function = operations[operation_symbol]
    answer = calculation_function(num1, num2)
    print(f"{num1} {operation_symbol} {num2} = {answer}")
    return answer


num1 = int(input("What is first number? "))
operations = {
"+": add,
"-": subtract,
"*": multiply,
"/": divide
}

for key in operations:
    print(key)

calculat = True
while calculat:
    answer = cal()

    new_calculate = input(f"Type 'y' to continue calculating with {answer}, or type 'n' to start a new calculation:")
    num1 = answer
    if new_calculate == "n":
        print("bye")
        calculat = False



11 day 02.03.23 blackjack
import random
import pi_module

print(pi_module.logo)
start_game_one = input("Do you want to play a game of Blackjack? Type 'y' or 'n': \n")

deck_cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]


def first_hand():
    player_hand = []
    dealer_hand = []
    player_hand.append(random.choice(deck_cards))
    player_hand.append(random.choice(deck_cards))

    dealer_hand.append(random.choice(deck_cards))
    dealer_hand.append(random.choice(deck_cards))
    return player_hand, dealer_hand


def add_cards_to_hand(chose_role):
    if chose_role == "player":
        player_hand.append(random.choice(deck_cards))
    else:
        dealer_hand.append(random.choice(deck_cards))


def print_cards(chose_role):
    if chose_role == "your_cards":
        print(f"Your cards: {player_hand}, current score: {sum(player_hand)}")
    else:
        print(f"Computer's cards: {dealer_hand}, current score: {sum(dealer_hand)}\n")


game_started = True
turn = "player"
if start_game_one == "y":

    game_started = True
    first_hand()
    player_hand, dealer_hand = first_hand()
    print(f"Your cards: {player_hand}, current score: {sum(player_hand)}")
    print(f"Computer's first card: {dealer_hand[0]}\n")

else:
    print("gg, invalid value")
    game_started = False


def sum_cards_in_hand(cards_in_hand):
    if 11 in cards_in_hand and sum(cards_in_hand) > 21:
        cards_in_hand.remove(11)
        cards_in_hand.append(1)

    return cards_in_hand


def check_lose(player):
    global game_started
    global turn
    sum_player = sum(sum_cards_in_hand(player))

    if sum_player > 21:
        print("You lose this game\n")
        game_started = False


def check_win(player, dealer):
    global game_started
    sum_player = sum(sum_cards_in_hand(player))
    sum_dealer = sum(sum_cards_in_hand(dealer))

    if sum_player > sum_dealer or sum_dealer > 21:
        print("you win")
        game_started = False
    elif sum_player < sum_dealer or sum_dealer == 21:
        print("you lose")
        game_started = False
    elif sum_player == sum_dealer:
        print("draw")
        game_started = False


while game_started:
    global new_card

    if turn == "player":
        y = sum(sum_cards_in_hand(player_hand))
        if y == 21:
            turn = "g"
            continue
        else:
            new_card = input("Type 'y' to get another card, type 'n' to pass: \n")

            if new_card == "y":
                add_cards_to_hand(chose_role="player")
                sum_cards_in_hand(player_hand)
                sum_cards_in_hand(dealer_hand)
                print_cards(chose_role="your_cards")
                x = sum_cards_in_hand(player_hand)
                check_lose(player=x)

    elif turn != "player":
        print_cards(chose_role="dealer_cards")
        while sum(dealer_hand) < 17:
            add_cards_to_hand(chose_role="dealer")
            print_cards(chose_role="dealer_cards")
        x = sum_cards_in_hand(player_hand)
        y = sum_cards_in_hand(dealer_hand)
        check_win(player=x, dealer=y)

    else:
        print("invalid value")
        game_started = False



12 day 03.03.23 scope

enemies = 1

def increase_enemies():
  enemies = 2
  print(f"enemies inside function: {enemies}")

increase_enemies()
print(f"enemies outside function: {enemies}")
::enemies inside function: 2
enemies outside function: 1




player_health = 10

def game():
    def drink_potion():
        potion_strenght = 2
        print(player_health)

drink_potion()
print(player_health)
:NameError: name 'drink_potion' is not defined



game_level = 3
enemies = ["skeleton", "zombie", "alien"]
if game_level < 5 :
    new_enemies = enemies[0]

print(new_enemies)
:skeleton


game_level = 3
def create_enemy():
    enemies = ["skeleton", "zombie", "alien"]
    if game_level < 5 :
        new_enemies = enemies[0]

print(new_enemies)
:name 'new_enemies' is not defined

game_level = 3
def create_enemy():
    enemies = ["skeleton", "zombie", "alien"]
    if game_level < 5 :
        new_enemies = enemies[0]

    print(new_enemies)
create_enemy()
:skeleton



enemies = "skeleton"

def increase_enemies():
    global enemies
    enemies = "zombie"
    print(f"enemies inside function: {enemies}")

increase_enemies()
print(f"enemies outside function: {enemies}")
:enemies inside function: zombie
enemies outside function: zombie



enemies = "skeleton"

def increase_enemies():
    enemies = "zombie"
    print(f"enemies inside function: {enemies}")
    return enemies

enemies = increase_enemies()
print(f"enemies outside function: {enemies}")
:enemies inside function: zombie
enemies outside function: zombie



PI = 3.14
URL = "https://www.google.com"
PAMBU = "pambu"

def create():
    print(PAMBU)

create()
:pambu


12 day 03.03.23 scope numspace
#my answer
import random
import pi_module

number = random.randint(1,100)
#print(f"number is {number}")

print(pi_module.pambu_doh)
print("Welcome to the Number Guessing Game!")
input_level = input("Choose a difficulty. Type 'easy' or 'hard': ")

def check_level(input_level):
    global life
    if input_level == "hard" or input_level == "h":
        print("You have 5 attempts remaining to guess the number.")
        life = 5
    elif input_level == "easy" or input_level == "e":
        print("You have 10 attempts remaining to guess the number.")
        life = 10
    return life


check_level(input_level)


def check_number(user_answer):
    global life
    global game
    if user_answer > 100 or user_answer < 0:
        print("incorrect answer")
        life = life - 1
    elif user_answer == number:
        print(f"You got it! The answer was {number}.")
        game = False
    elif user_answer > number:
        print("Too high.")
        life = life - 1
        print(f"You have {life} attempts remaining to guess the number.")
    elif user_answer < number:
        print("Too low.")
        life = life - 1
        print(f"You have {life} attempts remaining to guess the number.")
    return life


game = True

while game:
    if life == 0 and user_answer != number:
        print(f"You've run out of guesses, you lose. The answer was {number}.")
        game = False
    else:
        user_answer = int(input("Make a guess: "))
        check_number(user_answer)




#teatcher answer
EASY_LEVEL_TURNS = 10
HARD_LEVEL_TURNS = 5

#Function to check user's guess against actual answer.
def check_answer(guess, answer, turns):
  """checks answer against guess. Returns the number of turns remaining."""
  if guess > answer:
    print("Too high.")
    return turns - 1
  elif guess < answer:
    print("Too low.")
    return turns - 1
  else:
    print(f"You got it! The answer was {answer}.")

#Make function to set difficulty.
def set_difficulty():
  level = input("Choose a difficulty. Type 'easy' or 'hard': ")
  if level == "easy":
    return EASY_LEVEL_TURNS
  else:
    return HARD_LEVEL_TURNS

def game():
  print(logo)
  #Choosing a random number between 1 and 100.
  print("Welcome to the Number Guessing Game!")
  print("I'm thinking of a number between 1 and 100.")
  answer = randint(1, 100)
  print(f"Pssst, the correct answer is {answer}")

  turns = set_difficulty()
  #Repeat the guessing functionality if they get it wrong.
  guess = 0
  while guess != answer:
    print(f"You have {turns} attempts remaining to guess the number.")

    #Let the user guess a number.
    guess = int(input("Make a guess: "))

    #Track the number of turns and reduce by 1 if they get it wrong.
    turns = check_answer(guess, answer, turns)
    if turns == 0:
      print("You've run out of guesses, you lose.")
      return
    elif guess != answer:
      print("Guess again.")


game()





