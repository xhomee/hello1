1 day 18.01.23

\n - сепарація
+ конкатинація
\ - можна використовувати для того щоб не бачило " ' в строці виводу

variable - змінна

c = a
a = b
b = c



2 day 19.01.23

data types, numbers, operations, type conversion, f-string

string - строки в ""
subscript - метод витягування символів з строки []
integer - всі числа без десятичних символів .Там можна записувати великі числа так 123_345_534
float - число з плаваючою точкою
boolean - True or False

type() - побачити тип функції
міняти тип данних функції
str()
int()
float()


+ додавання
- віднімання
* множення
/ ділення
float буде завжди при множенні та діленні
** степінь

пріоритети - від більшого () ** * / + -

round( ,число скільчи чисел буде після коми) округлення до цілого числа
// ділення - результат завжди буде число с плаваючою строкою
+=
-= можна використовувати замість score = score - 1

f - strings - використовуються замість того щоб конвертувати різні типи змінних в стрінг



3 day 23.01.23
Conditional if/else

if condition:
    do this
else:
    do this

comparison operators :
> greather than
< less than
>= grether than or equal to
<= less than or equal to
== equal to
!= mot equal to

modulo operation
7 % 2 - отримуємо 7 поділено на дві частини отримуємо 2 + 2 + 2 + 1 - таким чином 7 поділене на 2 може бути розділено
на 3 раз по 2 з остатком 1 який і виводить данна функція


nested if/else
if condition:
    if another condition:
        do this
    else:
        do this
else:
    do this


if/elif/else    тільки одне рішення
if condotion1:
    do A
elif condition2:
    do B
else:
    do this


multiple if     може бути багато рішень
if condition1:
    do A
if condition2:
    do B
if condition3:
    do C


if condition1 & condition 2 & condition3:
    do this
else:
    do this

logical operators
A and B      повинні обоє бути true щоб виконався рядот
C or D       один повинен бути тру
not E        якщо умова True то замінить її на false

.lover() = переновить всі символи в нижній регістр
.count() = підраховує скільки разів символ повторюється



4 day 24.01.23
Randomisation and Python Lists  - списки

pi_module.pi - створення свого модуля

random.random() - від 0 до 1 але якщо помножити то можна зробити до будь якого числа - random_float*5 але не включаючи 5


Lists - список який можна назвати структурою данних Data Structure
fruits = [item1, item2] - можуть мати різні типи данних. item1 = [0] or [-2] item2= [0] or [-1]
fruits[0] = 'item3'  - запише item3 замість item1

https://docs.python.org/3/tutorial/datastructures.html
.append() - додасть один пункт в кінець списку
.extend(["hi","hello"]) - додасть декілька елементів в кінець списку

.split() - позволяє розділити строку на окремі компоненти використовуючи якийсь дільник наприклад (",")
.choise() - вибрати

list1 = [1]
list2 = [2]
list3 = [list1, list2] список всередині списку - [[1], [2]]



5 day 26.01.23
loops

for loop
for single_item in list_of_items:   - Цикл дозоляє виконати одну і ту саме строку коді декулька разів
    #Do something to each item - зробити щось з кожним предметом.

sum - дає суму всіх пінктув в списку
max - показує масимальне значення в списку
min - мінімальне значення

range function - функція діапазону
for number in range(a, b):  - не включая останній символ (a,b,c) - C = крок
    print(number)

random.choice() - вибрати рандомний елемент зі списку
random.shuffle() - перемішати список



6 day 30.01.23
code blocks, functions, while loops

#Defining Function  визначення функції
def my_function():
    #do this
    #Then do this
    #Finally do this
#Calling Functions  виклик функції
my_function()

while something_is_true:
    #Do something repeatedly - робити щось неодноразово



7 day 31.01.23
hangman

for position in range(len(chosen_word)):
    letter = chosen_word[position]  - сказати що позиція letter буде номером позиції

if not True:
a= 3
if not a>1: - True


end_of_game = False
while not end_of_game:
    ...
    end_of_game = True



8 day 1.02.23
functions with inputs
arguments & parameters

def my_function(something):             something = 123
    #Do this with something             parameter   argument
    #Then do this


math.ceil - округлення в більшу сторону
math.float - округлення в меншу сторону



9 day 9.02.23
dictionaries & nesting  - словарі та вкладення

{key : Value} - {"bug" : "An error", "function" : "A piece of code", "loop": " The action"}
dictionary[name_of_element] = "add new element in dictionary with key name_of_element" - or edit existing element

empty_dictionary = {}  - створити новий словник, або можна стерти старий

for key in programming_dictionary:
    print(key)                                - give a key
    print(programing_dictionary[key])         - give value

{
key : [List],
key2 : {Dictionary}
}


[{
key : [List],
key2 : {Dictionary},
},
{
key : value,
key2 : value,
}]



10 day 24.02.23  functions with outputs - функції з виводом
def my_function():
    result = 3*2
    return result

def my_function():
    return 3*2
output = my_function()

.title - зробити кожну літеру заголовною


def days_in_month(year,month):
    """ hello documentation here"""         - створення документації підказок


def add(n1, n2):                        - повернення відповіді
    return n1 + n2

operations = {"+": add}                 - використовувати словник як метод функцій
function = operations["+"]
print(function(2,8))
::10


If you want to use the return value from a function, then call the function and assign it to such a variable
def fun():                          - використовувати змінну повернену return
    x = 5
    return x
>>> x = fun()
>>> x
5



def recursion():        - рекурсія
    do something
    recursion() - repeat do something

resucrion()



11 day 02.03.23 blackjack
global - use global for def















